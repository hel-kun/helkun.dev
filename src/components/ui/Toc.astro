---
interface MarkdownHeading {
    depth: number;
    slug: string;
    text: string;
}

interface Props {
    headings: MarkdownHeading[];
}

const { headings } = Astro.props;
---
<nav class="toc">
    <input type="checkbox" id="toc-toggle" class="toggle">
    <div class="flex justify-between">
        <h3 class="order-first">目次</h3>
        <button id="tocButton" class="label order-last hover:bg-slate-200 dark:hover:bg-slate-600 flex flex-col justify-center items-center rounded-md px-2">
            <span class="left"></span>
            <span class="right"></span>
        </button>
    </div>
    <div id="content" class="content">
        <ul>
            {
                headings.map((heading) => {
                    if(heading.depth === 3) {
                        return(
                            <ul>
                                <li>
                                    <a href={`#${heading.slug}`}>{heading.text}</a>
                                </li>
                            </ul>
                        )
                    }else if(heading.depth === 2){
                        return(
                            <li>
                                <a href={`#${heading.slug}`}>{heading.text}</a>
                            </li>
                        )
                    }
                })
            }
        </ul>
    </div>
</nav>

<style is:global>
    .toc{
		@apply rounded-xl p-3 my-4 bg-gray-300 dark:bg-gray-700;
        .toggle{
            @apply hidden;
        }
		a{
			@apply underline text-blue-500 dark:text-blue-400;
		}
        #content{
            @apply overflow-hidden transition-all duration-500 ease-in-out;
            height: 0;
        }
		ul{
    		@apply list-disc mx-8;
    		ul{
    		    @apply list-circle my-0;
    		}
    	}
        .left{
            @apply w-3 h-1 rounded-full bg-black dark:bg-white transition-all rotate-45 -translate-x-1 translate-y-[2px] duration-500;
        }
        .right{
            @apply w-3 h-1 rounded-full bg-black dark:bg-white transition-all -rotate-45 translate-x-1 -translate-y-[2px] duration-500;
        }

        .toggle:checked + .flex{
            .left{
                @apply -rotate-45;
            }
            .right{
                @apply rotate-45;
            }
        }
	}
</style>
<script>
    const checkbox = document.getElementById('toc-toggle') as HTMLInputElement;
    const button = document.getElementById('tocButton') as HTMLButtonElement;
    const content = document.getElementById('content') as HTMLDivElement;

    button.addEventListener('click', () => {
        checkbox.checked = !checkbox.checked;
        if(checkbox.checked){
            content.style.height = `${content.scrollHeight}px`;
        } else {
            content.style.height = '0';
        }
    });
    
    //checkbox.addEventListener('change', () => {
    //    if(checkbox.checked){
    //        content.style.height = `${content.scrollHeight}px`;
    //    } else {
    //        content.style.height = '0';
    //    }
    //});
</script>